services:
  frontend:
    container_name: frontend
    image: frontend
    build:
      context: frontend
    networks:
      - intranet.net
    expose:
      - 5173
    restart: always

  backend:
    container_name: backend
    image: backend
    build:
      context: backend
    networks:
      - intranet.net
    expose:
      - 8000
    restart: always
    depends_on:
      pg:
        condition: service_healthy
    # command: ["poetry", "run", "bash", "/app/prestart.sh"]

  proxy:
    image: nginx:alpine3.19
    container_name: proxy
    restart: always
    expose:
      - 80
    ports:
      - 80:80
    networks:
      - intranet.net
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend

  pg:
    image: postgres:15-alpine
    container_name: db
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - intranet.net
    env_file:
      - .env
    volumes:
      - pg-data:/var/lib/postgresql/data

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - intranet.net

volumes:
  pg-data:
networks:
  intranet.net:
